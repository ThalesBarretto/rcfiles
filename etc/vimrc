let g:molokai_original=1
let g:rehash256=1
" set t_Co=256
set termguicolors
set secure
colorscheme molokai

" PLUGINS ------------------------------------------------------------------ {{{
"
filetype plugin indent on

" Load matchit.vim, but only if the user hasn't installed a newer version.
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"	runtime! macros/matchit.vim


"let mapleader = " "
" From Latexsuite plugin install message
" set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"
let g:Tex_DefaultTargetFormat='pdf'
set runtimepath=~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,~/.vim/after

" Vim taglist setting from arch-wiki
let Tlist_Compact_Format = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Close_On_Select = 1

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'
set tags^=.git/tags

" Set spellfile to location that is guaranteed to exist, can be symlinked to
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

" }}}


" MAPPINGS ------------------------------------------------------------------{{{

nnoremap : ;
nnoremap ; :
nnoremap <Leader>n :cnext<CR>
nnoremap <Leader>p :cprev<CR>
nnoremap <Leader>o :copen<CR>
nnoremap <Leader>c :cclose<CR>
nnoremap <Leader>t :TlistToggle<CR>
"nnoremap <Leader><Leader> <C-^>

" grep with ripgrep
set path+=${PWD}/**
set grepprg=rg\ --vimgrep\ --smart-case\ --follow
"nnoremap ç :grep 
"tab navigation
nnoremap th  :tabfirst<CR>
nnoremap tk  :tabnext<CR>
nnoremap tj  :tabprev<CR>
nnoremap tl  :tablast<CR>
" noremap tt  :tabedit<CR>
nnoremap tm  :tabm<CR>
nnoremap td  :tabclose<CR>

" fzf shortcuts
nnoremap <silent><C-f> :Files<CR>
nnoremap <silent><Leader>f :Rg<CR>
nnoremap <silent><Leader>b :Buffers<CR>
nnoremap <silent><Leader>' :Marks<CR>
nnoremap <silent><Leader>g :Commits<CR>
nnoremap <silent><Leader>H :Helptags<CR>
nnoremap <silent><Leader>hh :History<CR>
"nnoremap <silent> <Leader>t :TestFile<CR>
"nnoremap <silent> <Leader>t :TestFile<CR>
"nnoremap <silent> <Leader>s :TestNearest<CR>
"nnoremap <silent> <Leader>l :TestLast<CR>
"nnoremap <silent> <Leader>a :TestSuite<CR>
"nnoremap <silent> <Leader>gt :TestVisit<CR>
"
nnoremap <C-t> :ter<CR>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Move between linting errors
"nnoremap <C-]> :ALENextWrap<CR>
"nnoremap <C-[> :ALEPreviousWrap<CR>

" }}}


" VIMSCRIPT -----------------------------------------------------------------{{{


" This will enable code folding.
" Use the marker method of folding.
augroup filetype_vim
    autocmd!
        autocmd FileType vim setlocal foldmethod=marker
        augroup END

let &t_ut=''
set encoding=utf-8

" Leader

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=100
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands
set modelines=0   " Disable modelines as a security precaution
set nomodeline

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·
set nolist

" Use one space, not two, after punctuation.
set nojoinspaces

" Make it obvious where 80 characters is
" set textwidth=80
" set colorcolumn=+1

" Numbers
set number
set numberwidth=5
set relativenumber

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full


" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement

" Map Ctrl + p to open fuzzy find (FZF)
"


" }}}

autocmd FileType tex setlocal expandtab 
autocmd FileType tex setlocal tabstop=4 
autocmd FileType tex setlocal shiftwidth=4
autocmd FileType tex setlocal softtabstop=4
autocmd FileType tex setlocal spell spelllang=pt,en_us,uk
autocmd FileType tex setlocal foldmethod=manual
autocmd FileType tex setlocal makeprg=latexmk
autocmd FileType matlab setlocal expandtab 
autocmd FileType matlab setlocal tabstop=2 
autocmd FileType matlab setlocal shiftwidth=2
autocmd FileType matlab setlocal softtabstop=2
autocmd FileType matlab setlocal foldmethod=manual
